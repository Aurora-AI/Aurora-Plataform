services:
  qdrant:
    build:
      context: ./services/qdrant
    image: aurora/qdrant:v1.11.0-curl
    container_name: aurora-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__STORAGE__STORAGE_PATH: /qdrant/storage
      RUST_LOG: info
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:6333/collections || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 25s
    networks:
      - aurora-net

  postgres:
    image: postgres:15
    container_name: aurora-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: aurora
      POSTGRES_USER: aurora
      POSTGRES_PASSWORD: aurora
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aurora-net

  aurora-core:
    build:
      context: .
      dockerfile: services/core/Dockerfile
    container_name: aurora-core
    restart: unless-stopped
    ports:
      - "8081:8000"
    environment:
      APP_HOST: 0.0.0.0
      APP_PORT: 8000
      PYTHONPATH: "/app/src:/app:/app/aurora-core/src"
    command: >
      sh -c "python -c 'import time,aurora_platform as _; print(\"aurora-core container up - maintenance mode\"); time.sleep(31536000)'"
    depends_on:
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import aurora_platform; print('ok')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - aurora-net

  aurora-platform-final:
    build:
      context: .
      dockerfile: services/core/Dockerfile
    container_name: aurora-platform-final
    restart: unless-stopped
    ports:
      - "8080:8000"
    environment:
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key}
      PYTHONPATH: "/app/src:/app:/app/aurora-core/src"
      APP_HOST: 0.0.0.0
      APP_PORT: 8000
    command: >
      sh -c "python -c 'import time,aurora_platform as _; print(\"aurora-platform-final container up - maintenance mode\"); time.sleep(31536000)'"
    healthcheck:
      test: ["CMD", "python", "-c", "import aurora_platform; print('ok')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      qdrant:
        condition: service_healthy
    networks:
      - aurora-net

  deepseek-r1:
    build:
      context: ./deepseek-r1
      dockerfile: Dockerfile
    container_name: aurora-plataform-deepseek-r1-1
    restart: unless-stopped
    ports:
      - "8010:8000"
    environment:
      MODEL_NAME: "deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B"
      PORT: "8000"
      HOST: "0.0.0.0"
    volumes:
      - deepseek_models:/models
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 8
      start_period: 30s
    networks:
      - aurora-net

networks:
  aurora-net:
    driver: bridge

volumes:
  qdrant_data:
  pg_data:
  deepseek_models:
    driver: local
