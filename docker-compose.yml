# Compose v2: a chave "version" é opcional e evitamos o warning do Docker Desktop
# Sintaxe: espaços (2) — NUNCA tabs.

services:
  aurora-core:
    container_name: aurora-core
    build:
      context: .
      dockerfile: ./aurora-core/Dockerfile
    env_file:
      - .env
    ports:
      - "8081:8000"
    depends_on:
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8000/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 20s
    networks:
      - aurora-net

  deepseek-r1:
    container_name: aurora-plataform-deepseek-r1-1
    image: aurora-plataform-deepseek-r1
    # se for build local, troque por:
    # build:
    #   context: ./deepseek-r1
    #   dockerfile: Dockerfile
    ports:
      - "8010:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8000/v1/models || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 20s
    networks:
      - aurora-net

  qdrant:
    container_name: aurora-qdrant
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:6333/health | grep -q '\"status\":\"ok\"'"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s
    networks:
      - aurora-net

  postgres:
    container_name: aurora-postgres
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-aurora}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aurora}
      POSTGRES_DB: ${POSTGRES_DB:-aurora}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aurora} -d ${POSTGRES_DB:-aurora}"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s
    networks:
      - aurora-net

# Se você tiver um gateway/edge (ex: aurora-platform-final), pode habilitar:
#  aurora-platform-final:
#    container_name: aurora-platform-final
#    build:
#      context: .
#      dockerfile: ./gateway/Dockerfile
#    ports:
#      - "8080:8000"
#    depends_on:
#      aurora-core:
#        condition: service_healthy
#    healthcheck:
#      test: ["CMD-SHELL", "curl -sf http://localhost:8000/health || exit 1"]
#      interval: 15s
#      timeout: 5s
#      retries: 10
#      start_period: 20s
#    networks:
#      - aurora-net

networks:
  aurora-net:
    driver: bridge

volumes:
  qdrant_data:
  pg_data:
